#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require 'lexer'
  require 'nodes'

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 170)
  def parse(code, show_tokens=true)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    46,    57,    29,    21,    72,    34,    61,    42,    53,    31,
    32,    33,    37,    51,    52,    65,    24,    66,    20,    56,
    45,    28,    71,    60,    41,    30,    47,    35,    48,    63,
    64,     7,     6,    26,    40,    23,    43,    18,    17,    50,
     1,    54,    14,    58,    13,    10,     9,    68,    69,    70,
     1 ]

racc_action_check = [
    38,    49,    23,    18,    67,    26,    54,    35,    43,    25,
    26,    26,    28,    43,    43,    59,    20,    59,    18,    49,
    38,    23,    67,    54,    35,    25,    39,    27,    39,    55,
    55,     1,     1,    22,    33,    19,    36,    16,    12,    41,
    11,    44,     9,    52,     8,     3,     2,    60,    63,    64,
     0 ]

racc_action_pointer = [
    48,    21,    46,    39,   nil,   nil,   nil,   nil,    41,    42,
   nil,    38,    25,   nil,   nil,   nil,    25,   nil,    -6,    18,
     7,   nil,    19,    -3,   nil,     0,   -13,    12,     7,   nil,
   nil,   nil,   nil,    11,   nil,     0,    20,   nil,    -5,     3,
   nil,    32,   nil,   -10,    26,   nil,   nil,   nil,   nil,    -6,
   nil,   nil,    20,   nil,    -1,     9,   nil,   nil,   nil,    -8,
    40,   nil,   nil,    26,    27,   nil,   nil,    -3,   nil,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -1,    -9,   -53,    -2,    -3,    -6,   -11,   -10,   -12,   -53,
    -7,    -5,   -14,   -13,    73,    -4,   -16,   -15,   -53,   -21,
   -53,   -17,   -26,   -53,   -19,   -53,   -30,   -33,   -53,   -22,
   -18,   -20,   -27,   -53,   -29,   -53,   -38,   -24,   -53,   -53,
   -31,   -53,   -34,   -42,   -45,   -23,   -25,   -32,   -28,   -53,
   -36,   -39,   -53,   -41,   -53,   -50,   -35,   -37,   -43,   -53,
   -53,   -46,    -8,   -53,   -53,   -44,   -40,   -53,   -48,   -51,
   -52,   -47,   -49 ]

racc_goto_table = [
     4,    36,     2,    11,     8,    12,    16,    19,    22,    27,
     3,    15,    44,    55,    62,    25,    38,    39,    49,    59,
    67 ]

racc_goto_check = [
     3,    12,     1,     4,     6,     7,     8,     9,    10,    11,
     2,     3,    13,    14,    15,    16,    17,    18,    19,    20,
    21 ]

racc_goto_pointer = [
   nil,     2,    10,     0,     0,   nil,     3,    -3,    -6,    -9,
   -11,   -13,   -26,   -24,   -31,   -41,    -5,   -12,   -16,   -23,
   -33,   -40 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 27, :_reduce_1,
  1, 27, :_reduce_2,
  1, 28, :_reduce_3,
  3, 28, :_reduce_4,
  2, 28, :_reduce_5,
  1, 29, :_reduce_none,
  1, 30, :_reduce_none,
  11, 31, :_reduce_8,
  0, 32, :_reduce_9,
  1, 32, :_reduce_10,
  1, 32, :_reduce_11,
  0, 33, :_reduce_12,
  1, 33, :_reduce_13,
  0, 34, :_reduce_14,
  1, 34, :_reduce_15,
  0, 35, :_reduce_16,
  2, 35, :_reduce_17,
  4, 35, :_reduce_18,
  1, 42, :_reduce_19,
  2, 42, :_reduce_20,
  0, 36, :_reduce_21,
  2, 36, :_reduce_22,
  4, 36, :_reduce_23,
  1, 43, :_reduce_24,
  2, 43, :_reduce_25,
  0, 37, :_reduce_26,
  2, 37, :_reduce_27,
  4, 37, :_reduce_28,
  2, 37, :_reduce_29,
  1, 37, :_reduce_30,
  1, 44, :_reduce_31,
  2, 44, :_reduce_32,
  0, 38, :_reduce_33,
  2, 38, :_reduce_34,
  4, 38, :_reduce_35,
  1, 45, :_reduce_36,
  2, 45, :_reduce_37,
  0, 39, :_reduce_38,
  2, 39, :_reduce_39,
  4, 39, :_reduce_40,
  2, 39, :_reduce_41,
  1, 39, :_reduce_42,
  1, 46, :_reduce_43,
  2, 46, :_reduce_44,
  0, 40, :_reduce_45,
  2, 40, :_reduce_46,
  4, 40, :_reduce_47,
  1, 47, :_reduce_48,
  2, 47, :_reduce_49,
  0, 41, :_reduce_50,
  2, 41, :_reduce_51,
  2, 41, :_reduce_52 ]

racc_reduce_n = 53

racc_shift_n = 73

racc_token_table = {
  false => 0,
  :error => 1,
  :ACTION => 2,
  :DIRECTION => 3,
  :AF => 4,
  :PROTOCOL => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :IDENTIFIER => 9,
  :RETURN => 10,
  :DROP => 11,
  :ON => 12,
  :LOG => 13,
  :FROM => 14,
  :PORT => 15,
  :TO => 16,
  :PROTO => 17,
  :ANY => 18,
  :ALL => 19,
  :KEEP => 20,
  :NO => 21,
  :STATE => 22,
  :IPADDRESS => 23,
  "{" => 24,
  "}" => 25 }

racc_nt_base = 26

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ACTION",
  "DIRECTION",
  "AF",
  "PROTOCOL",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "IDENTIFIER",
  "RETURN",
  "DROP",
  "ON",
  "LOG",
  "FROM",
  "PORT",
  "TO",
  "PROTO",
  "ANY",
  "ALL",
  "KEEP",
  "NO",
  "STATE",
  "IPADDRESS",
  "\"{\"",
  "\"}\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Filter",
  "BlockType",
  "Direction",
  "Log",
  "Interface",
  "Protocol",
  "From",
  "FromPort",
  "To",
  "ToPort",
  "State",
  "InterfaceList",
  "ProtocolList",
  "FromList",
  "FromPortList",
  "ToList",
  "ToPortList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_5(val, _values, result)
     result = Nodes.new([val[0]]) 
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_8(val, _values, result)
     result = FilterNode.new(val[0], val[1], val[2],
                                        val[3], val[4], val[5], val[6], val[7], 
                                        val[8], val[9], val[10]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_9(val, _values, result)
     result = :reject 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 73)
  def _reduce_10(val, _values, result)
     result = :reject 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_11(val, _values, result)
     result = :drop 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_12(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_13(val, _values, result)
     result = DirectionNode.new(val[0].to_sym) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_14(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_15(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_16(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_17(val, _values, result)
     result = [InterfaceNode.new(val[1])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_18(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_19(val, _values, result)
     result = [InterfaceNode.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_20(val, _values, result)
     result = val[0] << InterfaceNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_21(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_22(val, _values, result)
     result = [ProtocolNode.new(val[1])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_23(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_24(val, _values, result)
     result = [ProtocolNode.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_25(val, _values, result)
     result = val[0] << ProtocolNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_26(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_27(val, _values, result)
     result = [IPNode.new(val[1], :source)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_28(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_29(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_30(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_31(val, _values, result)
     result = [IPNode.new(val[0], :source)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_32(val, _values, result)
     result = val[0] << IPNode.new(val[1], :source) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_33(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_34(val, _values, result)
     result = [PortNode.new(val[1], :source)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_35(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_36(val, _values, result)
     result = [PortNode.new(val[0], :source)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_37(val, _values, result)
     result = val[0] << PortNode.new(val[1], :source) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_38(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_39(val, _values, result)
     result = [IPNode.new(val[1], :dest)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_40(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_41(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_42(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_43(val, _values, result)
     result = [IPNode.new(val[0], :dest)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_44(val, _values, result)
     result = val[0] << IPNode.new(val[1], :dest) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_45(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_46(val, _values, result)
     result = [PortNode.new(val[1], :dest)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_47(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_48(val, _values, result)
     result = [PortNode.new(val[0], :dest)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_49(val, _values, result)
     result = val[0] << PortNode.new(val[0], :dest) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_50(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_51(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_52(val, _values, result)
     result = false 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
