#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require 'lexer'
  require 'nodes'

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 198)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    28,    58,    29,    30,    31,     2,     2,    45,    55,    83,
    91,    88,    79,    53,    65,    60,    89,    54,    24,    57,
    25,    66,    50,    35,    59,    19,    67,     3,     3,    44,
    82,    90,    78,    28,    64,    29,    30,    31,    48,    38,
    43,    49,    17,    72,    18,    10,     8,    11,    70,    76,
    77,    24,    71,    25,    12,    36,    41,    37,    63,    46,
    14,    69,    39,    73,    15,    32,    80,    22,    84,    85,
    86,    20,    51 ]

racc_action_check = [
    26,    52,    26,    26,    26,    13,     0,    39,    46,    74,
    87,    81,    69,    46,    57,    54,    81,    46,    26,    47,
    26,    61,    42,    26,    52,    11,    61,    13,     0,    39,
    74,    87,    69,    18,    57,    18,    18,    18,    42,    32,
    37,    42,    11,    63,    11,     2,     2,     3,    63,    68,
    68,    18,    63,    18,     5,    32,    37,    32,    56,    40,
     6,    62,    33,    64,     9,    23,    71,    16,    76,    77,
    78,    12,    44 ]

racc_action_pointer = [
     4,   nil,    35,    21,   nil,    54,    54,   nil,   nil,    61,
   nil,    17,    71,     3,   nil,   nil,    54,   nil,    28,   nil,
   nil,   nil,   nil,    53,   nil,   nil,    -5,   nil,   nil,   nil,
   nil,   nil,    30,    45,   nil,   nil,   nil,    31,   nil,     2,
    45,   nil,    13,   nil,    67,   nil,   -10,     4,   nil,   nil,
   nil,   nil,    -4,   nil,    -8,   nil,    42,     7,   nil,   nil,
   nil,    -2,    46,    25,    56,   nil,   nil,   nil,    29,     5,
   nil,    43,   nil,   nil,     2,   nil,    46,    47,    63,   nil,
   nil,   -12,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,
   nil,   nil ]

racc_action_default = [
    -1,    -6,   -21,   -68,    -7,   -68,    -2,    -3,   -23,   -24,
   -22,   -68,   -68,    -5,    -8,   -25,   -26,   -11,   -68,    -9,
    92,    -4,   -27,   -28,   -17,   -19,   -68,   -12,   -15,   -16,
   -18,   -14,   -68,   -36,   -13,   -10,   -30,   -68,   -29,   -68,
   -41,   -33,   -68,   -32,   -68,   -37,   -45,   -48,   -35,   -31,
   -34,   -39,   -68,   -42,   -68,   -44,   -53,   -68,   -40,   -38,
   -46,   -68,   -60,   -57,   -68,   -49,   -47,   -43,   -65,   -68,
   -54,   -68,   -56,   -51,   -68,   -20,   -68,   -68,   -68,   -61,
   -58,   -68,   -50,   -52,   -66,   -67,   -63,   -68,   -59,   -55,
   -62,   -64 ]

racc_goto_table = [
     7,    27,    47,    13,    26,     6,     9,    16,    23,    34,
    33,    40,     5,    21,    56,    62,    68,    75,    42,    52,
    61,    74,    81,    87 ]

racc_goto_check = [
     3,     8,    14,     4,     7,     2,     9,    10,    11,     8,
    12,    13,     1,     3,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24 ]

racc_goto_pointer = [
   nil,    12,     5,     0,    -3,   nil,   nil,   -14,   -17,     4,
    -2,    -8,   -13,   -22,   -38,   -33,   -41,   -46,   -51,   -19,
   -25,   -34,   -43,   -49,   -55 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     1,     4,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 30, :_reduce_1,
  1, 30, :_reduce_2,
  1, 31, :_reduce_3,
  3, 31, :_reduce_4,
  2, 31, :_reduce_5,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 33, :_reduce_none,
  3, 35, :_reduce_9,
  5, 35, :_reduce_10,
  3, 35, :_reduce_11,
  1, 36, :_reduce_12,
  2, 36, :_reduce_13,
  1, 37, :_reduce_14,
  1, 37, :_reduce_15,
  1, 37, :_reduce_16,
  1, 37, :_reduce_17,
  1, 37, :_reduce_18,
  1, 37, :_reduce_19,
  11, 34, :_reduce_20,
  0, 38, :_reduce_21,
  1, 38, :_reduce_22,
  1, 38, :_reduce_23,
  0, 39, :_reduce_24,
  1, 39, :_reduce_25,
  0, 40, :_reduce_26,
  1, 40, :_reduce_27,
  0, 41, :_reduce_28,
  2, 41, :_reduce_29,
  2, 41, :_reduce_30,
  4, 41, :_reduce_31,
  1, 48, :_reduce_32,
  1, 48, :_reduce_33,
  2, 48, :_reduce_34,
  2, 48, :_reduce_35,
  0, 42, :_reduce_36,
  2, 42, :_reduce_37,
  4, 42, :_reduce_38,
  1, 49, :_reduce_39,
  2, 49, :_reduce_40,
  0, 43, :_reduce_41,
  2, 43, :_reduce_42,
  4, 43, :_reduce_43,
  2, 43, :_reduce_44,
  1, 43, :_reduce_45,
  1, 50, :_reduce_46,
  2, 50, :_reduce_47,
  0, 44, :_reduce_48,
  2, 44, :_reduce_49,
  4, 44, :_reduce_50,
  1, 51, :_reduce_51,
  2, 51, :_reduce_52,
  0, 45, :_reduce_53,
  2, 45, :_reduce_54,
  4, 45, :_reduce_55,
  2, 45, :_reduce_56,
  1, 45, :_reduce_57,
  1, 52, :_reduce_58,
  2, 52, :_reduce_59,
  0, 46, :_reduce_60,
  2, 46, :_reduce_61,
  4, 46, :_reduce_62,
  1, 53, :_reduce_63,
  2, 53, :_reduce_64,
  0, 47, :_reduce_65,
  2, 47, :_reduce_66,
  2, 47, :_reduce_67 ]

racc_reduce_n = 68

racc_shift_n = 92

racc_token_table = {
  false => 0,
  :error => 1,
  :ACTION => 2,
  :DIRECTION => 3,
  :AF => 4,
  :PROTOCOL => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :IDENTIFIER => 9,
  :RETURN => 10,
  :DROP => 11,
  :ON => 12,
  :LOG => 13,
  :FROM => 14,
  :PORT => 15,
  :TO => 16,
  :PROTO => 17,
  :ANY => 18,
  :ALL => 19,
  :KEEP => 20,
  :NO => 21,
  :STATE => 22,
  :IPADDRESS => 23,
  :VARIABLE_NAME => 24,
  :VARIABLE => 25,
  "=" => 26,
  "{" => 27,
  "}" => 28 }

racc_nt_base = 29

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ACTION",
  "DIRECTION",
  "AF",
  "PROTOCOL",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "IDENTIFIER",
  "RETURN",
  "DROP",
  "ON",
  "LOG",
  "FROM",
  "PORT",
  "TO",
  "PROTO",
  "ANY",
  "ALL",
  "KEEP",
  "NO",
  "STATE",
  "IPADDRESS",
  "VARIABLE_NAME",
  "VARIABLE",
  "\"=\"",
  "\"{\"",
  "\"}\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Filter",
  "SetVariable",
  "StringList",
  "StringListItem",
  "BlockType",
  "Direction",
  "Log",
  "Interface",
  "Protocol",
  "From",
  "FromPort",
  "To",
  "ToPort",
  "State",
  "InterfaceList",
  "ProtocolList",
  "FromList",
  "FromPortList",
  "ToList",
  "ToPortList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 43)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_5(val, _values, result)
     result = Nodes.new([val[0]]) 
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_9(val, _values, result)
     result = MurtanNode.set_variable(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_10(val, _values, result)
     result = MurtanNode.set_variable(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_11(val, _values, result)
     result = MurtanNode.set_variable(val[0],
                                        MurtanNode.get_variable(val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_12(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_13(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_19(val, _values, result)
     result = MurtanNode.get_variable(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_20(val, _values, result)
     result = FilterNode.new(val[0], val[1], val[2],
                                        val[3], val[4], val[5], val[6], val[7], 
                                        val[8], val[9], val[10]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_21(val, _values, result)
     result = :reject 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_22(val, _values, result)
     result = :reject 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_23(val, _values, result)
     result = :drop 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_24(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_25(val, _values, result)
     result = DirectionNode.new(val[0].to_sym) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_26(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_27(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_28(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_29(val, _values, result)
     result = [InterfaceNode.new(val[1])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_30(val, _values, result)
     result = MurtanNode.get_variable(val[1]).to_a.map { |int| InterfaceNode.new(int) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_31(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_32(val, _values, result)
     result = [InterfaceNode.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_33(val, _values, result)
     result = [InterfaceNode.new(MurtanNode.get_variable(val[0]))] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_34(val, _values, result)
     result = val[0] << InterfaceNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_35(val, _values, result)
     result = val[0] << InterfaceNode.new(MurtanNode.get_variable(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_36(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_37(val, _values, result)
     result = [ProtocolNode.new(val[1])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_38(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_39(val, _values, result)
     result = [ProtocolNode.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_40(val, _values, result)
     result = val[0] << ProtocolNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_41(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_42(val, _values, result)
     result = [IPNode.new(val[1], :source)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_43(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_44(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_45(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_46(val, _values, result)
     result = [IPNode.new(val[0], :source)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_47(val, _values, result)
     result = val[0] << IPNode.new(val[1], :source) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_48(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_49(val, _values, result)
     result = [PortNode.new(val[1], :source)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_50(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_51(val, _values, result)
     result = [PortNode.new(val[0], :source)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_52(val, _values, result)
     result = val[0] << PortNode.new(val[1], :source) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_53(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_54(val, _values, result)
     result = [IPNode.new(val[1], :dest)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_55(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_56(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_57(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_58(val, _values, result)
     result = [IPNode.new(val[0], :dest)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_59(val, _values, result)
     result = val[0] << IPNode.new(val[1], :dest) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_60(val, _values, result)
     result = [BlankNode.new] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_61(val, _values, result)
     result = [PortNode.new(val[1], :dest)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_62(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_63(val, _values, result)
     result = [PortNode.new(val[0], :dest)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_64(val, _values, result)
     result = val[0] << PortNode.new(val[0], :dest) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_65(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_66(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_67(val, _values, result)
     result = false 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
